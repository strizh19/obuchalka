import random
import psycopg2
from telebot import types, TeleBot, custom_filters
from telebot.storage import StateMemoryStorage
from telebot.handler_backends import State, StatesGroup
import os

from dotenv import load_dotenv
load_dotenv()
db_host = os.getenv('DB_HOST')
db_port = os.getenv('DB_PORT')
db_name = os.getenv('DB_NAME')
db_user = os.getenv('DB_USER')
db_password = os.getenv('DB_PASSWORD')
API_TOKEN = os.getenv('API_TOKEN')
state_storage = StateMemoryStorage()
bot = TeleBot(API_TOKEN, state_storage=state_storage)


print('Start telegram bot...')
known_users = []
userStep = {}
buttons = []

def init_db():
    conn = psycopg2.connect(
        dbname=db_name,
        user=db_user,
        password=db_password,
        host=db_host,
        port=db_port
    )
    return conn

@bot.message_handler(commands=['help'])
def help_command(message):
    cid = message.chat.id
    help_text = (
        """–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
        /start –∏–ª–∏ /cards - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        /clear - –°—Ç–µ—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞"""
    )
    bot.send_message(cid, help_text)
# –æ—á–∏—Å—Ç–∫–∞ —Å–ª–æ–≤–∞—Ä–µ–π

@bot.message_handler(commands=['clear'])
def clean_bot(message):
    cid = message.chat.id
    with init_db() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            TRUNCATE TABLE ignore_words CASCADE;
            TRUNCATE TABLE user_words CASCADE;
            TRUNCATE TABLE words CASCADE;
        """)
        cursor.execute("""
            INSERT INTO words (target_word, translate_word) VALUES 
            ('Bye!', '–ü–æ–∫–∞!'),
            ('Hi!', '–ü—Ä–∏–≤–µ—Ç!'),
            ('to do', '–¥–µ–ª–∞—Ç—å'),
            ('tea', '—á–∞–π'),
            ('milk', '–º–æ–ª–æ–∫–æ'),
            ('home', '–¥–æ–º'),
            ('cat', '–∫–æ—à–∫–∞'),
            ('flower', '—Ü–≤–µ—Ç–æ–∫'),
            ('bus', '–∞–≤—Ç–æ–±—É—Å'),
            ('red', '–∫—Ä–∞—Å–Ω—ã–π');
        """)

    bot.send_message(cid, "–ü—Ä–æ–≥—Ä–µ—Å—Å –æ—á–∏—â–µ–Ω, –≤—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ —É–¥–∞–ª–µ–Ω—ã, –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ /start")

def show_hint(*lines):
    return '\n'.join(lines)

def show_target(data):
    return f"{data['target_word']} -> {data['translate_word']}"

class Command:
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô'
    NEXT = '–î–∞–ª—å—à–µ ‚è≠'

class MyStates(StatesGroup):
    target_word = State()
    translate_word = State()
    another_words = State()

def get_user_step(uid):
    if uid in userStep:
        return userStep[uid]
    else:
        known_users.append(uid)
        userStep[uid] = 0
        print("New user detected, who hasn't used \"/start\" yet")
        return 0

# –ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –∏–∑ –ë–î
def get_random_word_from_db(message):
    with init_db() as conn:
        cursor = conn.cursor()
        cid = message.chat.id
        cursor.execute("""
                        SELECT w.id, w.target_word, w.translate_word
                        FROM words w
                        LEFT JOIN ignore_words ig ON w.id = ig.word_id AND ig.user_id = %s
                        WHERE ig.word_id IS NULL
                        ORDER BY RANDOM() LIMIT 1;
                    """, (cid,))
        word = cursor.fetchone()
        if word:
            return word
        return None

# –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥—Ä—É–≥–∏—Ö —Å–ª–æ–≤ –∏–∑ –ë–î
def get_other_words_from_db():
    with init_db() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT other_word FROM another_words ORDER BY RANDOM() LIMIT 3;")
        other_words = cursor.fetchall()
        return [word[0] for word in other_words]

@bot.message_handler(commands=['cards', 'start'])
def create_cards(message):
    cid = message.chat.id
    if cid not in known_users:
        known_users.append(cid)
        userStep[cid] = 0
        bot.send_message(cid, """
        –°–∞–ª—é—Ç! üëã –î–∞–≤–∞–π —É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π! 
        –£—á–µ–±–∞ –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Ç–µ–±—è —Ä–µ–∂–∏–º–µ –∏ —Ç–µ–º–ø–µ!
        –°–æ–±–µ—Ä–∏ —Å–≤–æ–π —Å–ª–æ–≤–∞—Ä—å —Å–∞–º!
        –¢–µ–±–µ –ø–æ–º–æ–≥—É—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:
        –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï,
        –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô.
        –ò—Ç–∞–∫, –ø–æ–µ—Ö–∞–ª–∏! ‚¨áÔ∏è""")

    markup = types.ReplyKeyboardMarkup(row_width=2)
    global buttons
    buttons = []
    result = get_random_word_from_db(message)
    if result:
        word_id, target_word, translate_word = result
        target_word_btn = types.KeyboardButton(target_word)
        buttons.append(target_word_btn)
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã another_words
        others = get_other_words_from_db()
        other_words_btns = [types.KeyboardButton(word) for word in others]
        buttons.extend(other_words_btns)
        random.shuffle(buttons)
        next_btn = types.KeyboardButton(Command.NEXT)
        add_word_btn = types.KeyboardButton(Command.ADD_WORD)
        delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
        buttons.extend([next_btn, add_word_btn, delete_word_btn])
        markup.add(*buttons)
        greeting = f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∑üá∫ {translate_word}"
        bot.send_message(message.chat.id, greeting, reply_markup=markup)
        bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['target_word'] = target_word
            data['translate_word'] = translate_word
            data['other_words'] = others
    else:
        bot.send_message(cid, """ –í—Å–µ —Å–ª–æ–≤–∞ —É–¥–∞–ª–µ–Ω—ã, –¥–æ–±–∞–≤—å –Ω–æ–≤—ã–µ –∏–ª–∏ –Ω–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ
           –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /clear """)

@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def next_cards(message):
    create_cards(message)
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ (–¥–æ–±–∞–≤–ª—è–µ–º –≤ –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç)

@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def delete_word(message):
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        cid = message.chat.id
        word_to_delete = data['target_word']
        translate_word = data['translate_word']
        word_id = get_word_id(word_to_delete)
        add_to_ignore_words(cid, word_id)
        bot.send_message(cid, f"–°–ª–æ–≤–æ '{translate_word}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç")
    create_cards(message)
# –î–æ–±–∞–≤–ª—è–µ—Ç —Å–ª–æ–≤–æ –≤ —Ç–∞–±–ª–∏—Ü—É ignore_words
def add_to_ignore_words(user_id, word_id):
    with init_db() as conn:
        cursor = conn.cursor()
        cursor.execute("""
           INSERT INTO ignore_words (user_id, word_id) 
           VALUES (%s, %s)""", (user_id, word_id))
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def add_word(message):
    cid = message.chat.id
    userStep[cid] = 1
    bot.send_message(message.chat.id, """
       –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:
       """)
# –î–æ–±–∞–≤–ª—è–µ—Ç —Å–ª–æ–≤–∞ –≤ –ë–î
@bot.message_handler(func=lambda message: get_user_step(message.chat.id) == 1)
def add_word_to_db(message):
    cid = message.chat.id
    with init_db() as conn:
        cursor = conn.cursor()
        target_word, translate_word = message.text.split(' ')
        target_word = target_word.strip()
        translate_word = translate_word.strip()
        cursor.execute("""INSERT INTO words (target_word, translate_word)
           VALUES (%s, %s)
           """, (target_word, translate_word))
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
        cursor.execute("""SELECT COUNT(*) FROM words """)
        word_count = cursor.fetchone()[0]
        bot.send_message(cid, f"–°–ª–æ–≤–æ '{target_word}' –∏ –ø–µ—Ä–µ–≤–æ–¥ '{translate_word}' –¥–æ–±–∞–≤–ª–µ–Ω—ã.\n"
                              f"–¢–µ–ø–µ—Ä—å –≤ —Å–ª–æ–≤–∞—Ä–µ {word_count} —Å–ª–æ–≤.")
    userStep[cid] = 0
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ user_words —á–µ—Ä–µ–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞

def insert_user_word(user_id, word_id, passed_word):
    with init_db() as conn:
        cursor = conn.cursor()
        cursor.execute("""
               INSERT INTO user_words (user_id, word_id, passed_word) 
               VALUES (%s, %s, %s)
           """, (user_id, word_id, passed_word))

# –ü–æ–ª—É—á–∞–µ—Ç word_id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã words
def get_word_id(target_word):
    with init_db() as conn:
        cursor = conn.cursor()
        cursor.execute("""SELECT id 
           FROM words WHERE target_word = %s""", (target_word,))
        result = cursor.fetchone()
        return result[0] if result else 0

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞
@bot.message_handler(func=lambda message: True, content_types=['text'])
def message_reply(message):
    text = message.text
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        markup = types.ReplyKeyboardMarkup(row_width=2)
        target_word = data.get('target_word')
        translate_word = data.get('translate_word')
        word_id = get_word_id(target_word)
        passed_word = (text == target_word)
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ –≤ –±–∞–∑—É –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º True/False
        insert_user_word(message.from_user.id, word_id, passed_word)
        if passed_word:
            for btn in buttons:
                if btn.text == text:
                    btn.text = text + '‚úÖ'
            hint_text = ["–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ!‚ù§Ô∏è", show_target(data)]
            hint = show_hint(*hint_text)
        else:
            for btn in buttons:
                if btn.text == text:
                    btn.text = text + '‚ùå'
                    break
            hint = show_hint("–ù–µ–≤–µ—Ä–Ω–æ!", f"–ü—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑! üá∑üá∫{translate_word}")
    markup.add(*buttons)
    bot.send_message(message.chat.id, hint, reply_markup=markup)
bot.add_custom_filter(custom_filters.StateFilter(bot))
bot.infinity_polling(skip_pending=True)
